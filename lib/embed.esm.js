/**
 * @formcrafts/embed
 * Copyright (c) 2024-2024, Nishant Agrawal. (MIT Licensed)
 * https://github.com/formcrafts/embed
 */

/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */

class Drawer {
    drawerElement;
    options;
    constructor(drawerElement, options) {
        this.drawerElement = drawerElement;
        this.options = options;
        drawerElement.drawerInstance = this;
        drawerElement.classList.add("fc-modal");
        this.bindEvents();
    }
    bindEvents() {
        this.drawerElement.querySelector(".handle")?.addEventListener("touchstart", (e) => this.close());
        this.drawerElement.addEventListener("click", (e) => {
            if (e.target === this.drawerElement)
                this.close();
        });
        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape")
                this.close();
        });
    }
    open() {
        document.body.style.overflow = "hidden";
        if (this.options.awaitOpenAnimation) {
            this.drawerElement.addEventListener("animationend", () => {
                this.afterOpen();
            }, { once: true });
        }
        this.drawerElement.setAttribute("aria-hidden", "false");
        this.drawerElement.classList.add(this.options.openClass || "open");
        if (!this.options.awaitOpenAnimation) {
            this.afterOpen();
        }
    }
    afterOpen() {
        if (this.options.onOpen)
            this.options.onOpen();
    }
    close() {
        document.body.style.overflow = "";
        this.drawerElement.setAttribute("aria-hidden", "true");
        if (this.options.awaitCloseAnimation) {
            this.drawerElement.addEventListener("animationend", () => {
                this.afterClose();
            }, { once: true });
        }
        if (!this.options.awaitCloseAnimation) {
            this.afterClose();
        }
    }
    afterClose() {
        this.drawerElement.classList.remove(this.options.openClass || "open");
        if (this.options.onClose)
            this.options.onClose();
    }
}

var css = ".fc-modal{display:none;z-index:999;position:fixed;top:0;left:0;right:0;bottom:0;overflow-y:auto;background:rgba(0,2,4,0.6);justify-content:center;align-items:center;padding:10vh 0;overscroll-behavior:none;will-change:background-color;--slide-up-distance:8px;--slide-up-duration:200ms;}.fc-modal.fc-is-open{display:flex;}.fc-modal__container{will-change:transform;position:fixed;}.fc-modal__container{display:flex;width:100%;box-shadow:0 0 12px rgba(0,0,0,0.4);background-color:#fff;max-height:80vh;border-radius:4px;overflow-y:auto;box-sizing:border-box;max-width:90vw;overscroll-behavior:contain;}.fc-modal__container iframe{min-height:200px;overscroll-behavior:contain;}@container (max-width:768px){.fc-modal{padding-bottom:0;align-items:flex-end;--slide-up-distance:30px;--slide-up-duration:300ms;}.fc-modal__container{align-self:flex-end;box-shadow:0 -5px 15px rgba(0,0,0,0.3);border-top-left-radius:0.5rem;border-top-right-radius:0.5rem;border-bottom-left-radius:0px;border-bottom-right-radius:0px;max-width:initial!important;width:100%;max-height:80%;}}@media (max-width:768px){.fc-modal{padding-bottom:0;align-items:flex-end;--slide-up-distance:30px;--slide-up-duration:300ms;}.fc-modal__container{align-self:flex-end;box-shadow:0 -5px 15px rgba(0,0,0,0.3);border-top-left-radius:0.5rem;border-top-right-radius:0.5rem;border-bottom-left-radius:0px;border-bottom-right-radius:0px;max-width:initial!important;width:100%;max-height:80%;}}.modal__close{background:0 0;border:0;}.modal__header .modal__close:before{content:\"\\2715\";}.modal__content{margin:2rem 0;line-height:1.5;color:rgba(0,0,0,0.8);}.fc-modal[aria-hidden=\"false\"],.fc-modal[aria-hidden=\"true\"]{animation-duration:var(--slide-up-duration);animation-timing-function:cubic-bezier(0,0,0.2,1);}.fc-modal[aria-hidden=\"false\"] .fc-modal__container,.fc-modal[aria-hidden=\"true\"] .fc-modal__container{animation-duration:var(--slide-up-duration);animation-timing-function:cubic-bezier(0,0,0,1);}@keyframes fcFadeIn{from{background:rgba(0,2,4,0);}to{background:rgba(0,2,4,0.6);}}@keyframes fcFadeOut{from{background:rgba(0,2,4,0.6);}to{background:rgba(0,2,4,0);}}@keyframes fcSlideUp{from{opacity:0;transform:translateY(var(--slide-up-distance));}to{opacity:1;transform:translateY(0);}}@keyframes fcSlideDown{from{opacity:1;transform:translateY(0);}to{opacity:0;transform:translateY(var(--slide-up-distance));}}.fc-modal[aria-hidden=\"false\"]{animation-name:fcFadeIn;}.fc-modal[aria-hidden=\"true\"]{animation-name:fcFadeOut;}.fc-modal[aria-hidden=\"false\"] .fc-modal__container{animation-name:fcSlideUp;}.fc-modal[aria-hidden=\"true\"] .fc-modal__container{animation-name:fcSlideDown;}";

const authorizedDomain = [
    "https://app.formcrafts.com",
    "https://app.beta-formcrafts.com",
    "https://app.localhost:5173",
];
const iframeShadow = "rgba(0, 5, 10, 0.08) 0px 0px 0px 0.5px, rgba(50, 55, 60, 0.04) 2px 3px 2px 0px, rgba(50, 50, 50, 0.03) -2px -2px 2px 0px, rgba(80, 80, 80, 0.176) 0px 7px 5px -7px";
// iframeSrc util
function buildIframeSrc(options) {
    const base = options.formBase ?? "https://app.formcrafts.com";
    const url = new URL(`${base}/${options.form}`);
    url.searchParams.set("iframe", "true");
    if (typeof options.seamless !== "undefined" && options.seamless === true) {
        url.searchParams.set("seamless", "true");
    }
    if (typeof options._params !== "undefined") {
        options._params.forEach((value, key) => {
            url.searchParams.set(key, value);
        });
    }
    return url.href;
}
function buildIframeSrcPopup(options) {
    const base = options.formBase ?? "https://app.formcrafts.com";
    const url = new URL(`${base}/${options.form}`);
    url.searchParams.set("iframe", "true");
    if (typeof options._params !== "undefined") {
        options._params.forEach((value, key) => {
            url.searchParams.set(key, value);
        });
    }
    return url.href;
}
function observeVisibility(targets, callback) {
    const handleIntersection = (entries, observer) => {
        for (const entry of entries) {
            if (entry.isIntersecting) {
                callback();
                observer.disconnect();
                return;
            }
        }
    };
    const observer = new IntersectionObserver(handleIntersection);
    if (Array.isArray(targets)) {
        targets.forEach((target) => observer.observe(target));
    }
    else {
        observer.observe(targets);
    }
}
function adjustIframeHeight(iframe, newHeight, target) {
    if (typeof newHeight === "undefined")
        return;
    if (target) {
        target.style.height = "";
    }
    iframe.style.height = `${newHeight}px`;
    iframe.style.visibility = "visible";
    iframe.style.position = "static";
}
const getValuesFromUrl = (search) => {
    try {
        const params = new URLSearchParams(search);
        const values = {};
        for (const key of params.keys()) {
            if (key.toLowerCase().startsWith("field")) {
                values[key.toLowerCase().replace("[]", "")] = params.getAll(key);
            }
        }
        return values;
    }
    catch (error) {
        return {};
    }
};
function createEventListeners(iframe, options, type) {
    const seamless = ("seamless" in options && options?.seamless) ?? false;
    window.addEventListener("message", (event) => {
        if (iframe.contentWindow !== event.source)
            return;
        if (!authorizedDomain.includes(event.origin))
            return false;
        if (event.data.type === "load") {
            iframe.contentWindow.postMessage({
                type: "url",
                content: window.location.href,
            }, "*");
            let prefill = options.values ?? {};
            const urlPrefill = getValuesFromUrl(window.location.search);
            if (urlPrefill) {
                prefill = { ...prefill, ...urlPrefill };
            }
            iframe.contentWindow.postMessage({
                type: "values",
                content: prefill,
            }, "*");
            const events = iframe._formcraftsEvents;
            if (events.load) {
                events.load.forEach((callback) => callback());
            }
        }
        if (event.data.type === "page") {
            const rect = iframe.getBoundingClientRect();
            const isVisible = rect.top >= 0 && rect.top <= window.innerHeight;
            if (!isVisible) {
                window.scrollBy({
                    top: rect.top -
                        parseFloat(getComputedStyle(document.documentElement).fontSize) * 2,
                    behavior: "smooth",
                });
            }
        }
        if (event.data.type === "height") {
            const target = "target" in options ? options.target : null;
            adjustIframeHeight(iframe, event.data.content, target);
        }
        if (event.data.type === "background" && !seamless) {
            iframe.style.background = event.data.content;
        }
        if (event.data.type === "name") {
            iframe.ariaLabel = event.data.content;
            iframe.title = event.data.content;
        }
        if (event.data.type === "success" && type === "embed") {
            const rect = iframe.getBoundingClientRect();
            const isVisible = rect.top >= 0 && rect.top <= window.innerHeight;
            if (!isVisible) {
                window.scrollBy({
                    top: rect.top -
                        parseFloat(getComputedStyle(document.documentElement).fontSize) * 1,
                    behavior: "smooth",
                });
            }
        }
        if (event.data.type === "close" && type === "popup" && options) {
            const modalId = `fc-modal-${options.form}`;
            const existingModal = document.getElementById(modalId);
            const existingDrawer = existingModal.drawerInstance;
            existingDrawer.close();
        }
    });
}
/**
 * Creates an inline form using an iframe.
 *
 * @param {EmbedOptions} options - The options for the form.
 * @returns {ReturnType} The return type of the createReturn function.
 */
function createInlineForm(options) {
    // Check if widget is already created
    if (options.target.querySelector("iframe")) {
        const iframe = options.target.querySelector("iframe");
        return createReturn(iframe);
    }
    if (typeof options.seamless === "undefined") {
        options.seamless = false;
    }
    const iframe = document.createElement("iframe");
    createEventListeners(iframe, options, "embed");
    const targetStyles = window.getComputedStyle(options.target);
    options.target.style.display = "flex";
    options.target.style.justifyContent = "stretch";
    options.target.style.width = "100%";
    iframe.dataset.src = buildIframeSrc(options);
    iframe.title = "Formcrafts form";
    iframe.style.border = "none";
    iframe.style.width = targetStyles.getPropertyValue("width");
    iframe.style.position = "absolute";
    iframe.style.visibility = "hidden";
    iframe.ariaLabel = "Formcrafts form";
    iframe.name = "formcrafts-iframe";
    iframe.onload = () => {
        options.target.style.overflow = "initial";
        iframe.style.width = `${options.width}px`;
        iframe.style.maxWidth = "100%";
        iframe.style.transition = "height 0ms linear";
        iframe.style.willChange = "height";
    };
    if (typeof options.width !== "undefined" && options.width !== null) {
        iframe.style.width = `${options.width}px`;
        iframe.style.maxWidth = "100%";
    }
    if (!options.seamless) {
        iframe.style.boxShadow = iframeShadow;
        iframe.style.borderRadius = "4px";
    }
    observeVisibility(iframe, () => {
        if (typeof iframe.dataset.src !== "undefined") {
            iframe.src = iframe.dataset.src;
            iframe.removeAttribute("data-src");
        }
    });
    // Add iframe to target
    options.target.appendChild(iframe);
    return createReturn(iframe);
}
function createReturn(iframe, options) {
    const instance = {
        on(event, callback) {
            const events = iframe._formcraftsEvents;
            events[event] = events[event] || [];
            events[event].push(callback);
        },
        values(values) {
            iframe.contentWindow?.postMessage({
                type: "values",
                content: values,
            }, "*");
        },
        destroy() {
            iframe?.remove();
        },
    };
    iframe._formcraftsInstance = instance;
    iframe._formcraftsEvents = {};
    return instance;
}
function createPopupReturn(drawer, config) {
    const iframe = drawer.drawerElement.querySelector("iframe");
    const instance = {
        on(event, callback) {
            const events = iframe._formcraftsEvents;
            events[event] = events[event] || [];
            events[event].push(callback);
        },
        load() {
            if (iframe) {
                const src = iframe.dataset.src;
                if (src) {
                    iframe.src = iframe.dataset.src;
                    iframe.removeAttribute("data-src");
                }
            }
        },
        values(values) {
            iframe.contentWindow?.postMessage({
                type: "values",
                content: values,
            }, "*");
        },
        open() {
            if (iframe) {
                const src = iframe.dataset.src;
                if (src) {
                    iframe.src = iframe.dataset.src;
                    iframe.removeAttribute("data-src");
                }
            }
            drawer.open();
        },
        close() {
            drawer.close();
        },
        destroy() {
            drawer.drawerElement.remove();
        },
    };
    iframe._formcraftsInstance = instance;
    iframe._formcraftsEvents = {};
    return instance;
}
// Create popup
function createPopup(options) {
    const modalConfig = {
        openClass: "fc-is-open",
        awaitOpenAnimation: true,
        awaitCloseAnimation: true,
    };
    const width = typeof options.width === "undefined" ? 500 : options.width;
    // Create modal elements
    const modalId = `fc-modal-${options.form}`;
    // Check if modal exists
    if (document.getElementById(modalId)) {
        const existingModal = document.getElementById(modalId);
        const existingDrawer = existingModal.drawerInstance;
        return createPopupReturn(existingDrawer);
    }
    // Get / create style
    if (!document.getElementById("fc-modal-css")) {
        const style = document.createElement("style");
        style.id = "fc-modal-css";
        style.appendChild(document.createTextNode(css));
        document.head.appendChild(style);
    }
    const modal = document.createElement("div");
    modal.id = modalId;
    modal.classList.add("fc-modal");
    modal.ariaHidden = "true";
    const modalContainer = document.createElement("div");
    modalContainer.style.maxWidth = `min(90vw,${width}px)`;
    modalContainer.style.visibility = "hidden";
    modalContainer.role = "dialog";
    modalContainer.setAttribute("aria-modal", "true");
    modalContainer.classList.add("fc-modal__container");
    // Create form iframe
    const iframe = document.createElement("iframe");
    createEventListeners(iframe, options, "popup");
    iframe.dataset.src = buildIframeSrcPopup(options);
    iframe.title = "Formcrafts popup form";
    iframe.style.border = "none";
    iframe.style.width = "100%";
    iframe.ariaLabel = "Formcrafts popup form";
    iframe.name = "formcrafts-popup-iframe";
    iframe.style.willChange = "height";
    iframe.style.position = "static";
    iframe.style.transition = "height 0ms linear";
    iframe.style.willChange = "height";
    iframe.onload = () => {
        modalContainer.style.visibility = "visible";
    };
    modal.appendChild(modalContainer);
    modalContainer.appendChild(iframe);
    if (options.appendTo) {
        options.appendTo.appendChild(modal);
    }
    else {
        document.body.appendChild(modal);
    }
    const myDrawer = new Drawer(modal, modalConfig);
    return createPopupReturn(myDrawer);
}

export { createInlineForm, createPopup, getValuesFromUrl, observeVisibility };
//# sourceMappingURL=embed.esm.js.map
